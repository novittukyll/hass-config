---
light_no_action:
  variables:
    brightness: |
      [[[
        if (entity.attributes.brightness) {
          return Math.round(entity.attributes.brightness / 2.54)
        } else {
          return undefined
        }
      ]]]
    opacity: |
      [[[
        var brightness = Math.round(entity.attributes.brightness / 2.54);
        return brightness < 15 ? 0.15 : brightness / 100;
      ]]]
    light_color: |
      [[[
        var color = entity.attributes.rgb_color;
        var brightness = Math.round(entity.attributes.brightness / 2.54);
        var opacity = brightness < 15 ? 0.2 : brightness / 100;

        if (color) {
          return 'rgba(' + color + ',' + opacity + ')'
        }

        return 'var(--button-card-light-color)'
      ]]]
    state_colors:
      'on': |
        [[[
          var color = entity.attributes.rgb_color;
          var brightness = Math.round(entity.attributes.brightness / 2.54);
          var opacity = brightness < 15 ? 0.2 : brightness / 100;

          if (color) {
            return 'rgba(' + color + ',' + opacity + ')'
          }

          return 'var(--button-card-light-color)'
        ]]]
    card_glow: true
    icon_glow: false
  show_last_changed: false
  show_state: false
  template:
    - base
    - info
  hold_action:
    action: toggle
  custom_fields:
    brightness: |
      [[[
        if (variables.is_active) {
          return variables.brightness ? `${variables.brightness} %` : ''
        }
        return 'Pois'
      ]]]
    slider:
      card:
        type: "custom:my-slider"
        entity: "[[[ return entity.entity_id ]]]"
        radius: "10px"
        height: "1.5rem"
        mainSliderColor: >-
          [[[
            if (entity.state == "unavailable") {
              return "rgba(var(--color-grey-rgb),1)";
            }

            return variables.light_color;
          ]]]
        secondarySliderColor: >-
          [[[
            var color = entity.attributes.rgb_color;
            if (entity.state == "unavailable") {
              return "rgba(var(--color-grey-rgb),0.2)";
            }

            return 'rgba(' + entity.attributes.rgb_color + ',' + variables.opacity * 0.5 + ')'
          ]]]
        mainSliderColorOff: "rgba(var(--color-theme-rgb),0.05)"
        secondarySliderColorOff: "rgba(var(--color-theme-rgb),0.05)"
        thumbHorizontalPadding: "0px"
        thumbVerticalPadding: "0px"
        thumbWidth: "0px"
        card_mod:
          style: |
            ha-card {
              border-radius: 14px;
              box-shadow: none;
            }
  styles:
    grid:
      - grid-template-areas: |
          "i brightness"
          "n n"
          "slider slider"
      - grid-template-columns: 2.5rem 3.5fr
      - grid-template-rows: 2.5rem 1.5fr 2fr
    icon:
      - transition: all 2s ease
    img_cell:
      - transition: all 2s ease
    custom_fields:
      brightness:
        - align-self: center
        - justify-self: end
        - filter: "opacity(40%)"
        - font-size: 0.9rem
      slider:
        - align-self: end

light:
  template:
    - light_no_action
  tap_action:
    !include ../../popups/common/light.yaml

light_kids:
  template:
    - light_no_action
  tap_action:
    !include ../../popups/common/light-predefined-colors.yaml

compact_light:
  template:
    - light
    - compact_card
  styles:
    grid:
      - grid-template-areas: |
          "i n"
          "i brightness"
          "slider slider"
      - grid-template-columns: 2.5rem 3.5fr
      - grid-template-rows: 1.25rem 1.25rem 2fr
    name:
      - padding-left: 0.8rem
      - align-self: end
    custom_fields:
      brightness:
        - padding-left: 0.8rem
        - align-self: end
        - justify-self: start

run_scene:
  template:
    - "base_card"
    - "base_icon_name"
  variables:
    icon_glow: true
  tap_action:
    action: toggle
  styles:
    grid:
      - grid-template-areas: |
          ". i ."
          "n n n"
      - grid-template-columns: 1fr 2.5rem 1fr
      - grid-template-rows: 2.5rem 1fr
    img_cell:
      - justify-self: center
    name:
      - place-self: end center

scene_icon:
  template:
    - base
  variables:
    brightness: 100
    color_rgb: false
  show_name: true
  show_label: false
  show_state: false
  show_icon: true
  styles:
    img_cell:
      - width: 3rem
      - height: 3rem
      - background-color: "[[[ return `rgb(${variables.color_rgb})` ]]]"
      - border-radius: 50%
      - filter: "[[[ return `opacity(${variables.brightness}%)` ]]]"
      - '-webkit-box-shadow': "[[[ return `0 0 0.5rem 0.3rem rgb(${variables.color_rgb})` ]]]"
      - box-shadow: "[[[ return `0 0 0.5rem 0.3rem rgb(${variables.color_rgb})` ]]]"
    icon:
      - width: 0
      - height: 0
    grid:
      - grid-template-areas: |
          "i"
          "n"
      - grid-template-rows: 4rem 1.5rem
    name:
      - padding-top: 0.8rem
      - font-size: 1rem
    card:
      - width: 6rem
      - height: 6.1rem
      - box-shadow: none
      - background-color: transparent
      - border-radius: 0%
      - margin: 1rem 0 1rem 0

scene_icon_rgb:
  template:
    - scene_icon
  variables:
    color_rgb: 255, 255, 255
  tap_action:
    action: |
      [[[ return variables.is_active ? 'call-service' : 'none' ]]]
    service: script.scene_parameterized_color_rgb
    service_data:
      entities: "[[[ return [entity.entity_id] ]]]"
      color_rgb: "[[[ return variables.color_rgb ]]]"
      brightness: "[[[ return variables.brightness ]]]"

scene_icon_temperature:
  template:
    - scene_icon
  variables:
    color_temperature: 2800
  tap_action:
    action: |
      [[[ return variables.is_active ? 'call-service' : 'none' ]]]
    service: script.scene_parameterized_color_temperature
    service_data:
      entities: "[[[ return [entity.entity_id] ]]]"
      color_temperature: "[[[ return variables.color_temperature ]]]"
      brightness: "[[[ return variables.brightness ]]]"

compact_run_scene:
  template:
    - run_scene
    - compact_card
