card_generic_icon_small:
  template:
    - card_generic
  styles:
    img_cell: 
      - width: 30px
      - height: 30px
    icon:
      - color: 'var(--custom-icon-color)'

card_generic_icon_small_swapped:
  template:
    - card_generic_swap
  styles:
    img_cell: 
      - width: 30px
      - height: 30px
    icon:
      - color: 'var(--custom-icon-color)'

card_temperature:
  template: 
    - card_generic_icon_small
  styles:
    icon: 
      - color: |
          [[[
            var color = "red";
            var current_temp = entity.state;
            if (current_temp < 0) {
              color = "dodgerblue";
            } else if (current_temp < 5) {
              color = "yellow";
            } else if (current_temp < 25) {
              color = "green";
            } else {
              color = "red";
            }

            return color;
          ]]]

card_radon:
  template:
    - card_generic_icon_small
  styles:
    icon:
      - color: |
          [[[
            var color = 'red'
            var current_radon = entity.state;
            if (current_radon > 150) {
              return 'red'
            } else if (current_radon > 100) {
              return 'yellow'
            } else {
              return 'green'
            }
          ]]]    

vertical_binary_button:
  show_label: true
  label: "[[[ return (entity.attributes.value )]]]"
  styles:
    icon:
      - color: >
          [[[
            var color = "var(--custom-icon-color)";
            if (entity.state == 'on' || entity.state == 'unlocked') {
              color = "var(--warning-color)";
            }

            return color;
          ]]]
    label:
      - justify-self: center
      - align-self: start
      - font-weight: bolder
      - font-size: 12px
      - filter: opacity(40%)
    name:
      - margin-top: 10px
      - justify-self: center
      - font-weight: bold
      - font-size: 14px
    img_cell:
      - background-color: 'rgba(var(--color-theme),0.05)'
      - border-radius: 50%
      - place-self: center
      - width: 30px
      - height: 30px
    grid:
      - grid-template-areas: '"i" "n" "l"'
    card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 10px 0px 8px 0px
  size: 20px

card_light_slider_collapse_color:
  template: 
    - ulm_language_variables
  variables:
    ulm_card_light_slider_collapse_name: "[[[ return entity.attributes.friendly_name ]]]"
  show_icon: false
  show_name: false
  show_label: false
  state:
    - operator: template
      value: "[[[ return entity.state == 'on' ]]]"
      styles:
        card:
          - background-color: >
              [[[
                if (states['sun.sun'].state == "below_horizon"){
                  var color = entity.attributes.rgb_color;
                  if (color){
                     return 'rgba(' + entity.attributes.rgb_color + ',var(--opacity-bg))'
                  }
                  else{
                    return 'rgba(var(--color-yellow),var(--opacity-bg))'
                  } 
                }else if (states['sun.sun'].state == "above_horizon")
                  return 'rgba(var(--color-background-yellow),var(--opacity-bg))';
              ]]]
        grid:
          - row-gap: 12px
  styles:
    grid:
      - grid-template-areas: '"item1" "item2"'
      - grid-template-columns: 1fr
      - grid-template-rows: min-content min-content
    card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
  custom_fields:
    item1:
      card:
        type: 'custom:button-card'
        template:
          - icon_info
          - color_slider
        tap_action:
          action: more-info
        hold_action:
          action: toggle
        entity: "[[[ return entity.entity_id ]]]"
        label: >-
          [[[  
            if (entity.state !='unavailable'){
              if (entity.state =='off'){
                return variables.ulm_off;  
              } else if (entity.state == 'on'){
                if (entity.attributes.brightness != null){
                  var bri = Math.round(entity.attributes.brightness / 2.55);
                  return (bri ? bri : '0') + '%';
                } else {
                  return variables.ulm_on
                } 
              }
            } else {
              return variables.ulm_unavailable;
            }
          ]]]
        name: "[[[ return variables.ulm_card_light_slider_collapse_name ]]]"
        styles:
          card:
            - box-shadow: none
            - border-radius: var(--border-radius) var(--border-radius) var(--border-radius) var(--border-radius)
            - padding: 0px
    item2:
      card:
        type: conditional
        conditions:
          - entity: "[[[ return entity.entity_id ]]]"
            state: 'on'
        card:
          type: 'custom:my-slider'
          entity: '[[[ return entity.entity_id ]]]'
          radius: 14px
          height: 42px
          mainSliderColor: >
              [[[ 
                  var color = entity.attributes.rgb_color;
                  if (color){
                     return 'rgba(' + entity.attributes.rgb_color + ',1)'
                  }
                  else{
                    return 'rgba(var(--color-yellow),1)'
                  } 
              ]]]
          secondarySliderColor: >
              [[[ 
                  var color = entity.attributes.rgb_color;
                  if (color){
                     return 'rgba(' + entity.attributes.rgb_color + ',0.2)';
                  }
                  else{
                    return 'rgba(var(--color-yellow),0.2)';
                  } 
              ]]]
          mainSliderColorOff: rgba(var(--color-theme),0.05)
          secondarySliderColorOff: rgba(var(--color-theme),0.05)
          thumbHorizontalPadding: '0px'
          thumbVerticalPadding: '0px'   
          thumbWidth: 0px
          card_mod:
          style: |
            ha-card {
              border-radius: 14px;
              box-shadow: none;
            }

vertical_script_button:
  template:
    - vertical_buttons
  tap_action:
    action: call-service
    service: script.turn_on
    service_data:
      entity_id: '[[[ return entity.entity_id ]]]'

color_slider:
  state:
    - styles:
        icon:
          - color: >
              [[[ 
                  var color = entity.attributes.rgb_color;
                  if (color){
                     return 'rgba(' + entity.attributes.rgb_color + ',1)';
                  }
                  else{
                    return 'rgba(var(--color-yellow),1)';
                  } 
              ]]]
        label:
          - color: >
              [[[
                if (states['sun.sun'].state == "below_horizon"){
                  var color = entity.attributes.rgb_color;
                  if (color){
                     return 'rgba(' + entity.attributes.rgb_color + ',1)'
                  }
                  else{
                    return 'rgba(var(--color-yellow-text),1)'
                  } 
                }else if (states['sun.sun'].state == "above_horizon")
                  return 'rgba(var(--color-yellow-text),1)';
              ]]]
        name:
          - color: >
              [[[
                if (states['sun.sun'].state == "below_horizon"){
                  var color = entity.attributes.rgb_color;
                  if (color){
                     return 'rgba(' + entity.attributes.rgb_color + ',1)'
                  }
                  else{
                    return 'rgba(var(--color-yellow-text),1)'
                  } 
                }else if (states['sun.sun'].state == "above_horizon")
                  return 'rgba(var(--color-yellow-text),1)';
              ]]]
        img_cell:
          - background-color: >
              [[[ 
                  var color = entity.attributes.rgb_color;
                  if (color){
                     return 'rgba(' + entity.attributes.rgb_color + ',0.2)';
                  }
                  else{
                    return 'rgba(var(--color-yellow),0.2)';
                  } 
              ]]]
        card:
          - background-color: 'rgba(0,0,0,0)'
      value: 'on'
